import asyncio
import time
from typing import Dict, Any
from .base import BaseScenario
from load_testing.generators.http import HTTPRequestGenerator


class EnduranceTestScenario(BaseScenario):
    """–°—Ü–µ–Ω–∞—Ä–∏–π —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å"""

    async def execute(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("‚è≥ Starting endurance test...")

        metrics = self._init_metrics()
        start_time = time.time()

        async with HTTPRequestGenerator(self.config) as request_generator:
            # –î–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
            print(
                f"üïê Long-term test: {self.config.concurrent_users} users for {self.config.duration}s"
            )

            while time.time() - start_time < self.config.duration:
                tasks = []
                for _ in range(self.config.concurrent_users):
                    endpoint = self._select_endpoint()
                    tasks.append(request_generator.make_request(endpoint))

                results = await asyncio.gather(*tasks)
                self._update_metrics(metrics, results)

                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è RPS
                await asyncio.sleep(0.1)

        return self._finalize_metrics(metrics, start_time)
