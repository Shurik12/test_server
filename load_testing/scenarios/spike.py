import asyncio
import time
from typing import Dict, Any
from .base import BaseScenario
from load_testing.generators.http import HTTPRequestGenerator


class SpikeTestScenario(BaseScenario):
    """–°—Ü–µ–Ω–∞—Ä–∏–π —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∏–∫–æ–≤—ã—Ö –Ω–∞–≥—Ä—É–∑–æ–∫"""

    async def execute(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∏–∫–æ–≤—ã—Ö –Ω–∞–≥—Ä—É–∑–æ–∫"""
        print("‚ö° Starting spike test...")

        metrics = self._init_metrics()
        start_time = time.time()

        async with HTTPRequestGenerator(self.config) as request_generator:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–∑—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            phases = getattr(
                self.config,
                "spike_phases",
                [
                    (
                        60,
                        self.config.concurrent_users // 2,
                    ),  # 1 –º–∏–Ω –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
                    (10, self.config.concurrent_users * 3),  # 10 —Å–µ–∫ –ø–∏–∫–æ–≤–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
                    (
                        120,
                        self.config.concurrent_users // 2,
                    ),  # 2 –º–∏–Ω –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
                    (
                        10,
                        self.config.concurrent_users * 5,
                    ),  # 10 —Å–µ–∫ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
                    (60, self.config.concurrent_users // 2),  # 1 –º–∏–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                ],
            )

            for phase_duration, phase_users in phases:
                print(f"üîÑ Phase: {phase_users} users for {phase_duration}s")

                phase_start = time.time()
                while time.time() - phase_start < phase_duration:
                    tasks = []
                    for _ in range(phase_users):
                        endpoint = self._select_endpoint()
                        tasks.append(request_generator.make_request(endpoint))

                    results = await asyncio.gather(*tasks)
                    self._update_metrics(metrics, results)

                    await asyncio.sleep(0.1)

        return self._finalize_metrics(metrics, start_time)
